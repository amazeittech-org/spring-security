<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

    <context:component-scan base-package="com.skb.learn.spring.security" />
    <!-- With use-expression=true we can now user SPEL -->
    <security:http auto-config="true" use-expressions="true">
        <!--<security:http-basic/>-->
        <security:form-login login-page="/login" login-processing-url="/login" username-parameter="custom_username"
            password-parameter="custom_password" default-target-url="/appointments/" always-use-default-target="true"
                             authentication-failure-url="/login?error=true"/>
        <security:logout logout-url="/logout" logout-success-url="/login?logout=true" delete-cookies="JSESSIONID"/>
        <!-- Since not we are using SPEL we can logical operators like or, and, etc -->
        <security:intercept-url pattern="/appointments/*" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>
        <!-- hasAuthority() is similar to hasRole(). Internally hasAuthority() delegates to hasRole() -->
        <!-- We can also use SPEL like (though it is not recommended):
            <security:intercept-url pattern="/schedule/*" access="principal.username == 'kbowersox'"/>
        -->
        <security:intercept-url pattern="/services/*" access="hasAuthority('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/schedule/*" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
        <!-- To avoid putting lot of hasRole + or combination we can use hasAnyRole() -->
        <!-- In cases where we need to allow access to every one like home page, login page, contact us we can also use:
            <security:intercept-url pattern="/**" access="permitAll"/>
            Checkout more at SPEL homepage.
        -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_ANONYMOUS', 'ROLE_USER', 'ROLE_ADMIN')"/>
    </security:http>

    <security:authentication-manager>
        <!--<security:authentication-provider user-service-ref="customUserDetailsService" />-->
        <security:authentication-provider ref="customAuthenticationProvider" />
    </security:authentication-manager>

</beans>